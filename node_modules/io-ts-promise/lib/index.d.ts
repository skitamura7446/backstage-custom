import * as t from 'io-ts';
/**
 * Creates a function which takes incoming values and decodes them with the given io-ts type,
 * returning a promise reflecting the result.
 *
 * @param type io-ts type to use for decoding incoming values.
 */
export declare function decode<Output, Input>(type: t.Decoder<Input, Output>): (value: Input) => Promise<Output>;
/**
 * Decodes values using io-ts types, returning a promise reflecting the result.
 *
 * @param type io-ts type to use for decoding the value.
 * @param value Value to decode using the given io-ts type.
 */
export declare function decode<Output, Input>(type: t.Decoder<Input, Output>, value: Input): Promise<Output>;
/**
 * Checks whether error was produced by @see decode due to invalid data.
 */
export declare function isDecodeError(error: unknown): error is DecodeError;
/**
 * Custom error class which is rejected by the @see decode function
 * when decoding fails due to invalid data.
 */
export declare class DecodeError extends Error {
    name: string;
    errors: t.Errors;
    constructor(errors: t.Errors);
}
/**
 * Creates a new io-ts type from given decode and encode functions.
 *
 * @param decode Function that transforms unknown values to desired type,
 *               or throws an error if the tranformation is not supported.
 * @param encode Function that transforms decoded values back to the original encoded format.
 * @param name Optional name of the type, making decoding errors more informative.
 */
export declare function createType<Output>(decode: (encodedValue: unknown) => Output, encode: (decodedValue: Output) => unknown, name?: string): t.Type<Output, unknown, unknown>;
/**
 * Extends an existing io-ts type, mapping the output value using the decode and encode functions.
 *
 * @param baseType The io-ts type to extend.
 * @param decode Function to transform output of `baseType` to desired value,
 *               or throws an error if the transformation is not supported.
 * @param encode Function to transform decoded type to back to `baseType` output.
 * @param name Optional name of the type, making decoding errors more informative.
 */
export declare function extendType<Input, Output>(baseType: t.Type<Input, unknown>, decode: (encodedValue: Input) => Output, encode: (decodedValue: Output) => Input, name?: string): t.Type<Output, unknown, unknown>;
/**
 * Creates a new decoder from decode and function.
 *
 * @param decode Function that transforms unknown values to desired type,
 *               or throws an error if the tranformation is not supported.
 * @param name Optional name of the type, making decoding errors more informative.
 */
export declare function createDecoder<Output>(decode: (value: unknown) => Output, name?: string): t.Decoder<unknown, Output>;
/**
 * Extends an existing decoder, or io-ts type, mapping the output value using the decode function.
 *
 * @param baseDecoder The decoder, or io-ts type, to extend.
 * @param decode Function to transform output of `baseDecoder` to desired value,
 *               or throws an error if the transformation is not supported.
 * @param name Optional name of the type, making decoding errors more informative.
 */
export declare function extendDecoder<Input, Output>(baseDecoder: t.Decoder<unknown, Input>, decode: (value: Input) => Output, name?: string): t.Decoder<unknown, Output>;
