import { Table, MissingAnnotationEmptyState, ErrorBoundary, InfoCard } from '@backstage/core-components';
import { useApi, configApiRef } from '@backstage/core-plugin-api';
import { useEntity } from '@backstage/plugin-catalog-react';
import { Link, List, ListItem, LinearProgress } from '@material-ui/core';
import React, { useState, useEffect } from 'react';
import { i as isArgocdAvailable, A as ARGOCD_ANNOTATION_APP_NAME, a as argoCDApiRef, u as useArgoCDAppData } from './index-4aa81aae.esm.js';
import { u as useAppDetails } from './useAppDetails-2293a569.esm.js';
import SyncIcon from '@material-ui/icons/Sync';
import moment from 'moment';
import 'io-ts';
import 'io-ts-promise';
import 'io-ts-reporters';
import 'react-use';

const ArgoCDHistoryTable = ({
  data,
  retry
}) => {
  var _a, _b;
  const configApi = useApi(configApiRef);
  const baseUrl = configApi.getOptionalString("argocd.baseUrl");
  const namespaced = (_a = configApi.getOptionalBoolean("argocd.namespacedApps")) != null ? _a : false;
  const supportsMultipleArgoInstances = Boolean(
    (_b = configApi.getOptionalConfigArray("argocd.appLocatorMethods")) == null ? void 0 : _b.length
  );
  const columns = [
    {
      title: "Name",
      field: "name",
      render: (row) => baseUrl ? /* @__PURE__ */ React.createElement(
        Link,
        {
          href: `${baseUrl}/applications/${namespaced ? `${row.appNamespace}/${row.app}` : row.app}`,
          target: "_blank",
          rel: "noopener"
        },
        row.app
      ) : row.app
    },
    {
      title: "Deploy Details",
      defaultSort: "desc",
      field: "deployedAt",
      render: (row) => /* @__PURE__ */ React.createElement(List, { dense: true, style: { padding: "0px" } }, /* @__PURE__ */ React.createElement(ListItem, { style: { paddingLeft: "0px" } }, row.deployedAt ? `Deployed at ${moment(row.deployedAt).local().format("DD MMM YYYY, H:mm:ss")}` : null), /* @__PURE__ */ React.createElement(ListItem, { style: { paddingLeft: "0px" } }, row.deployedAt ? `Run ${moment(row.deployStartedAt).local().fromNow()}` : null), /* @__PURE__ */ React.createElement(ListItem, { style: { paddingLeft: "0px" } }, row.deployedAt && row.deployStartedAt ? `Took
            ${moment.duration(
        moment(row.deployStartedAt).diff(moment(row.deployedAt))
      ).humanize()}` : null))
    },
    {
      title: "Author",
      field: "revisionDetails.author",
      render: (row) => {
        var _a2;
        return /* @__PURE__ */ React.createElement("div", null, ((_a2 = row.revisionDetails) == null ? void 0 : _a2.author) || "Loading...");
      }
    },
    {
      title: "Message",
      field: "revisionDetails.message",
      render: (row) => {
        var _a2;
        return /* @__PURE__ */ React.createElement("div", null, ((_a2 = row.revisionDetails) == null ? void 0 : _a2.message) || "Loading...");
      }
    },
    {
      title: "Revision",
      field: "revision",
      render: (row) => /* @__PURE__ */ React.createElement("div", null, row.revision)
    }
  ];
  if (supportsMultipleArgoInstances) {
    columns.splice(1, 0, {
      title: "Instance",
      field: "instance",
      render: (row) => {
        var _a2, _b2, _c, _d;
        return ((_b2 = (_a2 = row.metadata) == null ? void 0 : _a2.instance) == null ? void 0 : _b2.name) ? (_d = (_c = row.metadata) == null ? void 0 : _c.instance) == null ? void 0 : _d.name : row.instance;
      }
    });
  }
  return /* @__PURE__ */ React.createElement(
    Table,
    {
      title: "ArgoCD history",
      options: {
        paging: true,
        search: false,
        draggable: false,
        padding: "dense"
      },
      data,
      columns,
      actions: [
        {
          icon: () => /* @__PURE__ */ React.createElement(SyncIcon, null),
          tooltip: "Refresh",
          isFreeAction: true,
          onClick: () => retry()
        }
      ]
    }
  );
};

const isHelmChart = (row) => {
  var _a;
  return ((_a = row.source) == null ? void 0 : _a.chart) !== void 0;
};
const getRevisionId = (row) => {
  if (row.revision.hasOwnProperty("revisionID")) {
    return row.revision.revisionID;
  }
  return row.revision;
};
const withRevisionDetails = async (api, url, row) => {
  if (isHelmChart(row)) {
    row.revisionDetails = { author: "n/a", message: "n/a", date: "n/a" };
    return row;
  }
  row.revisionDetails = await api.getRevisionDetails({
    url,
    app: row.app,
    appNamespace: row.appNamespace,
    revisionID: getRevisionId(row),
    instanceName: row.instance
  });
  return row;
};
const ArgoCDHistory = ({ entity }) => {
  const [tableRows, setTableRows] = useState([]);
  const argoCDApi = useApi(argoCDApiRef);
  const { url, appName, appSelector, appNamespace, projectName } = useArgoCDAppData({ entity });
  const { loading, value, error, retry } = useAppDetails({
    url,
    appName,
    appSelector,
    appNamespace,
    projectName
  });
  const revisionsToLoad = useApi(configApiRef).getOptionalNumber("argocd.revisionsToLoad") || -1;
  useEffect(() => {
    var _a;
    if (!value) {
      return;
    }
    let apps;
    if (value.items !== void 0) {
      apps = (_a = value.items) != null ? _a : [];
    } else if (Array.isArray(value)) {
      apps = value;
    } else {
      apps = [value];
    }
    const revisions = apps.filter((app) => {
      var _a2;
      return (_a2 = app == null ? void 0 : app.status) == null ? void 0 : _a2.history;
    }).flatMap((app) => {
      return app.status.history.sort(
        (a, b) => new Date(b.deployedAt || "").valueOf() - new Date(a.deployedAt || "").valueOf()
      ).slice(0, revisionsToLoad).map((entry) => {
        var _a2, _b;
        return {
          key: `${app.metadata.name}-${entry.revision}`,
          app: app.metadata.name,
          appNamespace: app.metadata.namespace,
          instance: (_b = (_a2 = app.metadata) == null ? void 0 : _a2.instance) == null ? void 0 : _b.name,
          ...entry
        };
      });
    });
    setTableRows(revisions);
    Promise.all(
      revisions.map(
        async (row) => await withRevisionDetails(argoCDApi, url, row)
      )
    ).then((rowsWithRevisions) => {
      setTableRows(rowsWithRevisions.filter((row) => row));
    });
  }, [value, argoCDApi, url, revisionsToLoad]);
  if (loading) {
    return /* @__PURE__ */ React.createElement(InfoCard, { title: "ArgoCD history" }, /* @__PURE__ */ React.createElement(LinearProgress, null));
  }
  if (error) {
    return /* @__PURE__ */ React.createElement(InfoCard, { title: "ArgoCD history" }, "Error occurred while fetching data. ", error.message);
  }
  if (tableRows.length) {
    return /* @__PURE__ */ React.createElement(ArgoCDHistoryTable, { data: tableRows, retry });
  }
  return null;
};
const ArgoCDHistoryCard = () => {
  const { entity } = useEntity();
  return !isArgocdAvailable(entity) ? /* @__PURE__ */ React.createElement(MissingAnnotationEmptyState, { annotation: ARGOCD_ANNOTATION_APP_NAME }) : /* @__PURE__ */ React.createElement(ErrorBoundary, null, /* @__PURE__ */ React.createElement(ArgoCDHistory, { entity }));
};

export { ArgoCDHistoryCard };
//# sourceMappingURL=ArgoCDHistoryCard-3751726f.esm.js.map
