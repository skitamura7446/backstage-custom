import { createApiRef, createRouteRef, createPlugin, createApiFactory, discoveryApiRef, identityApiRef, configApiRef, createRoutableExtension, createComponentExtension } from '@backstage/core-plugin-api';
import * as t from 'io-ts';
import { decode, isDecodeError } from 'io-ts-promise';
import reporter from 'io-ts-reporters';

const argoCDAppDeployRevisionDetails = t.type({
  author: t.union([t.string, t.undefined]),
  date: t.union([t.string, t.undefined]),
  message: t.union([t.string, t.undefined])
});
const argoCDAppHistory = t.type({
  id: t.union([t.number, t.undefined]),
  revision: t.union([
    t.type({
      revisionID: t.union([t.number, t.undefined]),
      author: t.union([t.number, t.undefined]),
      date: t.union([t.string, t.undefined]),
      message: t.union([t.string, t.undefined])
    }),
    t.undefined,
    t.string
  ]),
  deployStartedAt: t.union([t.string, t.undefined]),
  deployedAt: t.union([t.string, t.undefined])
});
const argoCDAppDetails = t.type({
  metadata: t.type({
    name: t.string,
    namespace: t.string,
    instance: t.union([
      t.type({
        name: t.union([t.string, t.undefined]),
        url: t.union([t.string, t.undefined])
      }),
      t.undefined
    ])
  }),
  status: t.type({
    sync: t.type({
      status: t.string
    }),
    health: t.type({
      status: t.string
    }),
    operationState: t.union([
      t.type({
        startedAt: t.string,
        finishedAt: t.union([t.string, t.undefined])
      }),
      t.undefined
    ]),
    history: t.union([t.array(argoCDAppHistory), t.undefined])
  })
});
const argoCDAppList = t.type({
  items: t.union([t.array(argoCDAppDetails), t.null])
});
const argoCDService = t.type({
  name: t.string,
  url: t.string,
  appName: t.union([t.array(t.string), t.undefined])
});
const argoCDServiceList = t.array(argoCDService);

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
const argoCDApiRef = createApiRef({
  id: "plugin.argocd.service"
});
const APP_NAMESPACE_QUERY_PARAM = "appNamespace";
class ArgoCDApiClient {
  constructor(options) {
    __publicField(this, "discoveryApi");
    __publicField(this, "backendBaseUrl");
    __publicField(this, "searchInstances");
    __publicField(this, "identityApi");
    __publicField(this, "useNamespacedApps");
    this.discoveryApi = options.discoveryApi;
    this.backendBaseUrl = options.backendBaseUrl;
    this.searchInstances = options.searchInstances;
    this.identityApi = options.identityApi;
    this.useNamespacedApps = options.useNamespacedApps;
  }
  async getBaseUrl() {
    if (this.searchInstances) {
      return `${this.backendBaseUrl}/api/argocd`;
    }
    return await this.discoveryApi.getBaseUrl("proxy");
  }
  getQueryParams(params) {
    const result = Object.keys(params).filter((key) => params[key] !== void 0).filter(
      (key) => key !== APP_NAMESPACE_QUERY_PARAM || this.useNamespacedApps
    ).map(
      (k) => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`
    ).join("&");
    return result ? `?${result}` : "";
  }
  async fetchDecode(url, typeCodec) {
    const { token } = await this.identityApi.getCredentials();
    const response = await fetch(url, {
      headers: token ? {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`
      } : void 0
    });
    if (!response.ok) {
      throw new Error(
        `failed to fetch data, status ${response.status}: ${response.statusText}`
      );
    }
    const json = await response.json();
    try {
      return await decode(typeCodec, json);
    } catch (e) {
      if (isDecodeError(e)) {
        throw new Error(
          `remote data validation failed: ${reporter.report(typeCodec.decode(json)).join("; ")}`
        );
      } else {
        throw e;
      }
    }
  }
  async listApps(options) {
    const proxyUrl = await this.getBaseUrl();
    const query = this.getQueryParams({
      selector: options.appSelector,
      project: options.projectName,
      appNamespace: options.appNamespace
    });
    return this.fetchDecode(
      `${proxyUrl}${options.url}/applications${query}`,
      argoCDAppList
    );
  }
  async getRevisionDetails(options) {
    const proxyUrl = await this.getBaseUrl();
    const query = this.getQueryParams({
      appNamespace: options.appNamespace
    });
    if (this.searchInstances) {
      return this.fetchDecode(
        `${proxyUrl}/argoInstance/${options.instanceName}/applications/name/${encodeURIComponent(
          options.app
        )}/revisions/${encodeURIComponent(
          options.revisionID
        )}/metadata${query}`,
        argoCDAppDeployRevisionDetails
      );
    }
    return this.fetchDecode(
      `${proxyUrl}${options.url}/applications/${encodeURIComponent(
        options.app
      )}/revisions/${encodeURIComponent(
        options.revisionID
      )}/metadata${query}`,
      argoCDAppDeployRevisionDetails
    );
  }
  async getAppDetails(options) {
    const proxyUrl = await this.getBaseUrl();
    const query = this.getQueryParams({
      appNamespace: options.appNamespace
    });
    if (this.searchInstances) {
      return this.fetchDecode(
        `${proxyUrl}/argoInstance/${options.instance}/applications/name/${encodeURIComponent(
          options.appName
        )}${query}`,
        argoCDAppDetails
      );
    }
    return this.fetchDecode(
      `${proxyUrl}${options.url}/applications/${encodeURIComponent(
        options.appName
      )}${query}`,
      argoCDAppDetails
    );
  }
  async getAppListDetails(options) {
    const proxyUrl = await this.getBaseUrl();
    const query = this.getQueryParams({
      appNamespace: options.appNamespace
    });
    if (this.searchInstances) {
      return this.fetchDecode(
        `${proxyUrl}/argoInstance/${options.instance}/applications/selector/${encodeURIComponent(
          options.appSelector
        )}${query}`,
        argoCDAppList
      );
    }
    return this.fetchDecode(
      `${proxyUrl}${options.url}/applications/selector/${encodeURIComponent(
        options.appSelector
      )}${query}`,
      argoCDAppList
    );
  }
  async serviceLocatorUrl(options) {
    if (!options.appName && !options.appSelector) {
      throw new Error("Need to provide appName or appSelector");
    }
    const baseUrl = await this.getBaseUrl();
    const query = this.getQueryParams({
      appNamespace: options.appNamespace
    });
    const url = options.appName ? `${baseUrl}/find/name/${encodeURIComponent(
      options.appName
    )}${query}` : `${baseUrl}/find/selector/${encodeURIComponent(
      options.appSelector
    )}${query}`;
    return this.fetchDecode(url, argoCDServiceList).catch((_) => {
      throw new Error("Cannot get argo location(s) for service");
    });
  }
}

const entityContentRouteRef = createRouteRef({
  id: "ArgoCD Entity Content"
});
const argocdPlugin = createPlugin({
  id: "argocd",
  apis: [
    createApiFactory({
      api: argoCDApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        identityApi: identityApiRef,
        configApi: configApiRef
      },
      factory: ({ discoveryApi, identityApi, configApi }) => {
        var _a;
        return new ArgoCDApiClient({
          discoveryApi,
          identityApi,
          backendBaseUrl: configApi.getString("backend.baseUrl"),
          useNamespacedApps: Boolean(
            configApi.getOptionalBoolean("argocd.namespacedApps")
          ),
          searchInstances: Boolean(
            (_a = configApi.getOptionalConfigArray("argocd.appLocatorMethods")) == null ? void 0 : _a.length
          )
        });
      }
    })
  ],
  routes: {
    entityContent: entityContentRouteRef
  }
});
const EntityArgoCDContent = argocdPlugin.provide(
  createRoutableExtension({
    name: "EntityArgoCDContent",
    component: () => import('./Router-7c9accd2.esm.js').then((m) => m.Router),
    mountPoint: entityContentRouteRef
  })
);
const EntityArgoCDOverviewCard = argocdPlugin.provide(
  createComponentExtension({
    name: "EntityArgoCDOverviewCard",
    component: {
      lazy: () => import('./ArgoCDDetailsCard-9146805c.esm.js').then((m) => m.ArgoCDDetailsCard)
    }
  })
);
const EntityArgoCDHistoryCard = argocdPlugin.provide(
  createComponentExtension({
    name: "EntityArgoCDHistoryCard",
    component: {
      lazy: () => import('./ArgoCDHistoryCard-3751726f.esm.js').then((m) => m.ArgoCDHistoryCard)
    }
  })
);

const ARGOCD_ANNOTATION_APP_NAME = "argocd/app-name";
const ARGOCD_ANNOTATION_APP_SELECTOR = "argocd/app-selector";
const ARGOCD_ANNOTATION_APP_NAMESPACE = "argocd/app-namespace";
const ARGOCD_ANNOTATION_PROJECT_NAME = "argocd/project-name";
const ARGOCD_ANNOTATION_PROXY_URL = "argocd/proxy-url";
const useArgoCDAppData = ({ entity }) => {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const appName = (_b = (_a = entity == null ? void 0 : entity.metadata.annotations) == null ? void 0 : _a[ARGOCD_ANNOTATION_APP_NAME]) != null ? _b : "";
  const appSelector = (_d = (_c = entity == null ? void 0 : entity.metadata.annotations) == null ? void 0 : _c[ARGOCD_ANNOTATION_APP_SELECTOR]) != null ? _d : "";
  const appNamespace = (_e = entity == null ? void 0 : entity.metadata.annotations) == null ? void 0 : _e[ARGOCD_ANNOTATION_APP_NAMESPACE];
  const projectName = (_f = entity == null ? void 0 : entity.metadata.annotations) == null ? void 0 : _f[ARGOCD_ANNOTATION_PROJECT_NAME];
  const url = (_h = (_g = entity == null ? void 0 : entity.metadata.annotations) == null ? void 0 : _g[ARGOCD_ANNOTATION_PROXY_URL]) != null ? _h : "/argocd/api";
  if (!(appName || appSelector || projectName)) {
    throw new Error("'argocd' annotation is missing");
  } else if (appName && (appSelector || projectName)) {
    throw new Error(
      "Cannot provide both 'argocd/app-name' and 'argocd-app' annotations"
    );
  }
  return { url, appName, appSelector, appNamespace, projectName };
};

const isArgocdAvailable = (entity) => {
  var _a, _b, _c;
  return Boolean((_a = entity == null ? void 0 : entity.metadata.annotations) == null ? void 0 : _a[ARGOCD_ANNOTATION_APP_NAME]) || Boolean((_b = entity == null ? void 0 : entity.metadata.annotations) == null ? void 0 : _b[ARGOCD_ANNOTATION_APP_SELECTOR]) || Boolean((_c = entity == null ? void 0 : entity.metadata.annotations) == null ? void 0 : _c[ARGOCD_ANNOTATION_PROJECT_NAME]);
};

export { ARGOCD_ANNOTATION_APP_NAME as A, EntityArgoCDContent as E, argoCDApiRef as a, argocdPlugin as b, EntityArgoCDOverviewCard as c, EntityArgoCDHistoryCard as d, ArgoCDApiClient as e, isArgocdAvailable as i, useArgoCDAppData as u };
//# sourceMappingURL=index-4aa81aae.esm.js.map
