import React from 'react';
import { makeStyles, Button, Drawer, Grid, Typography, IconButton, LinearProgress, Tooltip, Box, List, ListItem } from '@material-ui/core';
import moment from 'moment';
import { i as isArgocdAvailable, A as ARGOCD_ANNOTATION_APP_NAME, u as useArgoCDAppData } from './index-4aa81aae.esm.js';
import { StructuredMetadataTable, MissingAnnotationEmptyState, ErrorBoundary, InfoCard, Table } from '@backstage/core-components';
import { useApi, configApiRef } from '@backstage/core-plugin-api';
import { u as useAppDetails } from './useAppDetails-2293a569.esm.js';
import SyncIcon from '@material-ui/icons/Sync';
import { useEntity } from '@backstage/plugin-catalog-react';
import OpenInNewIcon from '@material-ui/icons/OpenInNew';
import CloseIcon from '@material-ui/icons/Close';
import MaterialButton from '@material-ui/core/Button';
import 'io-ts';
import 'io-ts-promise';
import 'io-ts-reporters';
import 'react-use';

const useStyles = makeStyles({
  paper: {
    padding: "2em"
  },
  header: {
    display: "flex",
    flexDirection: "row",
    paddingBottom: "2em"
  },
  button: {
    textTransform: "none",
    justifyContent: "flex-start",
    fontWeight: "bold"
  },
  icon: {
    fontSize: 20
  },
  content: {
    height: "80%"
  }
});
const DetailsDrawerComponent = (rowData, baseUrl) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p;
  const classes = useStyles();
  const [state, setState] = React.useState(false);
  const configApi = useApi(configApiRef);
  const namespaced = (_a = configApi.getOptionalBoolean("argocd.namespacedApps")) != null ? _a : false;
  const toggleDrawer = (open) => (event) => {
    if (event.type === "keydown" && (event.key === "Tab" || event.key === "Shift")) {
      return;
    }
    setState(open);
  };
  const tableContent = {
    "Argo CD Instance": (_d = (_c = (_b = rowData.metadata) == null ? void 0 : _b.instance) == null ? void 0 : _c.name) != null ? _d : "",
    repoUrl: (_f = (_e = rowData.spec) == null ? void 0 : _e.source) == null ? void 0 : _f.repoURL,
    repoPath: (_h = (_g = rowData.spec) == null ? void 0 : _g.source) == null ? void 0 : _h.path,
    destinationServer: (_j = (_i = rowData.spec) == null ? void 0 : _i.destination) == null ? void 0 : _j.server,
    destinationNamespace: (_l = (_k = rowData.spec) == null ? void 0 : _k.destination) == null ? void 0 : _l.namespace,
    syncStatus: (_n = (_m = rowData.status) == null ? void 0 : _m.sync) == null ? void 0 : _n.status,
    images: (_p = (_o = rowData.status) == null ? void 0 : _o.summary) == null ? void 0 : _p.images,
    ...baseUrl && {
      link: /* @__PURE__ */ React.createElement(
        MaterialButton,
        {
          variant: "outlined",
          color: "primary",
          size: "small",
          title: "Open Argo CD Dashboard",
          endIcon: /* @__PURE__ */ React.createElement(OpenInNewIcon, null),
          target: "_blank",
          href: `${baseUrl}/applications/${namespaced ? `${rowData.metadata.namespace}/${rowData.metadata.name}` : rowData.metadata.name}`
        },
        "Open Argo CD Dashboard"
      )
    }
  };
  const drawerContents = () => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", { className: classes.header }, /* @__PURE__ */ React.createElement(
    Grid,
    {
      container: true,
      direction: "column",
      justifyContent: "flex-start",
      alignItems: "flex-start"
    },
    /* @__PURE__ */ React.createElement(Grid, { item: true }, /* @__PURE__ */ React.createElement(Typography, { variant: "h5" }, "Argo Name: ", rowData.metadata.name))
  ), /* @__PURE__ */ React.createElement(
    IconButton,
    {
      key: "dismiss",
      title: "Close the drawer",
      onClick: () => setState(false),
      color: "inherit"
    },
    /* @__PURE__ */ React.createElement(CloseIcon, null)
  )), /* @__PURE__ */ React.createElement("div", { className: classes.content }, /* @__PURE__ */ React.createElement(StructuredMetadataTable, { metadata: tableContent })));
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    Button,
    {
      title: rowData.metadata.name,
      className: classes.button,
      onClick: toggleDrawer(true)
    },
    rowData.metadata.name
  ), /* @__PURE__ */ React.createElement(
    Drawer,
    {
      anchor: "right",
      classes: { paper: classes.paper },
      open: state,
      onClose: toggleDrawer(false)
    },
    drawerContents()
  ));
};

const MessageComponent = ({
  conditions
}) => {
  return /* @__PURE__ */ React.createElement(React.Fragment, null, conditions ? /* @__PURE__ */ React.createElement(List, { dense: true }, conditions.map((condition, index) => /* @__PURE__ */ React.createElement(ListItem, { style: { padding: 0 }, key: index }, condition.message))) : null);
};
const getElapsedTime = (start) => {
  return moment(start).fromNow();
};
const State = ({
  value,
  conditions
}) => {
  const colorMap = {
    Pending: "#dcbc21",
    Synced: "green",
    Healthy: "green",
    Inactive: "black",
    Failed: "red"
  };
  if (conditions !== void 0) {
    return /* @__PURE__ */ React.createElement(
      Tooltip,
      {
        title: /* @__PURE__ */ React.createElement(MessageComponent, { conditions }),
        placement: "bottom-start"
      },
      /* @__PURE__ */ React.createElement(Box, { display: "flex", alignItems: "center" }, /* @__PURE__ */ React.createElement(Button, { style: { paddingLeft: "0px" } }, /* @__PURE__ */ React.createElement(
        "span",
        {
          style: {
            display: "block",
            width: "8px",
            height: "8px",
            borderRadius: "50%",
            backgroundColor: colorMap[value] || "#dcbc21",
            marginRight: "5px"
          }
        }
      ), value))
    );
  }
  return /* @__PURE__ */ React.createElement(Box, { display: "flex", alignItems: "center" }, /* @__PURE__ */ React.createElement(
    "span",
    {
      style: {
        display: "block",
        width: "8px",
        height: "8px",
        borderRadius: "50%",
        backgroundColor: colorMap[value] || "#dcbc21",
        marginRight: "5px"
      }
    }
  ), value);
};
const OverviewComponent = ({
  data,
  extraColumns,
  retry
}) => {
  var _a;
  const configApi = useApi(configApiRef);
  const baseUrl = configApi.getOptionalString("argocd.baseUrl");
  const supportsMultipleArgoInstances = Boolean(
    (_a = configApi.getOptionalConfigArray("argocd.appLocatorMethods")) == null ? void 0 : _a.length
  );
  const getBaseUrl = (row) => {
    var _a2, _b, _c;
    if (supportsMultipleArgoInstances && !baseUrl) {
      return (_c = (_b = (_a2 = configApi.getConfigArray("argocd.appLocatorMethods").find((value) => value.getOptionalString("type") === "config")) == null ? void 0 : _a2.getOptionalConfigArray("instances")) == null ? void 0 : _b.find(
        (value) => {
          var _a3, _b2;
          return value.getOptionalString("name") === ((_b2 = (_a3 = row.metadata) == null ? void 0 : _a3.instance) == null ? void 0 : _b2.name);
        }
      )) == null ? void 0 : _c.getOptionalString("url");
    }
    return baseUrl;
  };
  const columns = [
    {
      title: "Name",
      highlight: true,
      render: (row) => DetailsDrawerComponent(row, getBaseUrl(row))
    },
    {
      title: "Sync Status",
      render: (row) => /* @__PURE__ */ React.createElement(
        State,
        {
          value: row.status.sync.status,
          conditions: row.status.conditions
        }
      )
    },
    {
      title: "Health Status",
      render: (row) => /* @__PURE__ */ React.createElement(State, { value: row.status.health.status, conditions: void 0 })
    },
    {
      title: "Last Synced",
      render: (row) => row.status.operationState ? getElapsedTime(row.status.operationState.finishedAt) : ""
    }
  ];
  if (supportsMultipleArgoInstances) {
    columns.splice(1, 0, {
      title: "Instance",
      render: (row) => {
        var _a2, _b;
        return (_b = (_a2 = row.metadata) == null ? void 0 : _a2.instance) == null ? void 0 : _b.name;
      }
    });
  }
  return /* @__PURE__ */ React.createElement(
    Table,
    {
      title: "ArgoCD overview",
      options: {
        paging: false,
        search: false,
        sorting: false,
        draggable: false,
        padding: "dense"
      },
      data: data.items || [],
      columns: columns.concat(extraColumns),
      actions: [
        {
          icon: () => /* @__PURE__ */ React.createElement(SyncIcon, null),
          tooltip: "Refresh",
          isFreeAction: true,
          onClick: () => retry()
        }
      ]
    }
  );
};
const ArgoCDDetails = ({
  entity,
  extraColumns
}) => {
  const { url, appName, appSelector, appNamespace, projectName } = useArgoCDAppData({
    entity
  });
  const { loading, value, error, retry } = useAppDetails({
    url,
    appName,
    appSelector,
    appNamespace,
    projectName
  });
  if (loading) {
    return /* @__PURE__ */ React.createElement(InfoCard, { title: "ArgoCD overview" }, /* @__PURE__ */ React.createElement(LinearProgress, null));
  }
  if (error) {
    return /* @__PURE__ */ React.createElement(InfoCard, { title: "ArgoCD overview" }, "Error occurred while fetching data. ", error.name, ": ", error.message);
  }
  if (value) {
    if (value.items !== void 0) {
      return /* @__PURE__ */ React.createElement(
        OverviewComponent,
        {
          data: value,
          retry,
          extraColumns
        }
      );
    }
    if (Array.isArray(value)) {
      const wrapped2 = {
        items: value
      };
      return /* @__PURE__ */ React.createElement(
        OverviewComponent,
        {
          data: wrapped2,
          retry,
          extraColumns
        }
      );
    }
    const wrapped = {
      items: [value]
    };
    return /* @__PURE__ */ React.createElement(
      OverviewComponent,
      {
        data: wrapped,
        retry,
        extraColumns
      }
    );
  }
  return null;
};
const ArgoCDDetailsCard = (props) => {
  const { entity } = useEntity();
  return !isArgocdAvailable(entity) ? /* @__PURE__ */ React.createElement(MissingAnnotationEmptyState, { annotation: ARGOCD_ANNOTATION_APP_NAME }) : /* @__PURE__ */ React.createElement(ErrorBoundary, null, /* @__PURE__ */ React.createElement(ArgoCDDetails, { entity, extraColumns: props.extraColumns || [] }));
};

export { ArgoCDDetailsCard };
//# sourceMappingURL=ArgoCDDetailsCard-9146805c.esm.js.map
